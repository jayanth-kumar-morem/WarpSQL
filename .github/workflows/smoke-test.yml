name: Smoke Test Docker Image
on:
  pull_request:
  push:
    branches:
      - main

env:
  ORG: timescaledev
  TS_VERSION: main
  PLATFORM: linux/amd64

jobs:
  smoketest:
    name: PG${{ matrix.pg }}-${{ matrix.type }}-${{ matrix.extensions }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pg: [15]
        type: ['normal', 'bitnami']
        extensions: ['all', 'citus', 'postgis', 'zombodb', 'pg_repack', 'pg_auto_failover', 'postgres_hll']
    steps:
      - name: Check out the source
        uses: actions/checkout@v3

      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2

      - name: Set extension environment variables
        run: |
          if [ "${{ matrix.extensions }}" == "all" ]; then
            echo "INCLUDE_CITUS=true" >> $GITHUB_ENV
            echo "INCLUDE_POSTGIS=true" >> $GITHUB_ENV
            echo "INCLUDE_ZOMBODB=true" >> $GITHUB_ENV
            echo "INCLUDE_PG_REPACK=true" >> $GITHUB_ENV
            echo "INCLUDE_PG_AUTO_FAILOVER=true" >> $GITHUB_ENV
            echo "INCLUDE_POSTGRES_HLL=true" >> $GITHUB_ENV
          else
            echo "INCLUDE_CITUS=false" >> $GITHUB_ENV
            echo "INCLUDE_POSTGIS=false" >> $GITHUB_ENV
            echo "INCLUDE_ZOMBODB=false" >> $GITHUB_ENV
            echo "INCLUDE_PG_REPACK=false" >> $GITHUB_ENV
            echo "INCLUDE_PG_AUTO_FAILOVER=false" >> $GITHUB_ENV
            echo "INCLUDE_POSTGRES_HLL=false" >> $GITHUB_ENV
            echo "INCLUDE_${{ matrix.extensions }}" >> $GITHUB_ENV
          fi

      - name: Build Docker Image for TimescaleDB
        run: |
          if [ ${{ matrix.type }} == bitnami ]
          then
            cd bitnami
          fi
          make build-docker-cache image PG_VER=pg${{ matrix.pg }} TAG_VERSION=smoketest-image BETA=1

      - name: Install psql
        run: sudo apt install postgresql-client

      - name: Run the smoke test
        run: |
          set -eu
          export PGHOST=localhost
          export PGUSER=postgres
          export PGPASSWORD=test1234
          docker container stop smoketest-container || true
          docker container rm smoketest-container || true
          docker run -d -p 5432:5432 -e POSTGRES_PASSWORD=${PGPASSWORD} --name smoketest-container smoketest-image
          for _ in {1..120}
          do
            if [ -z "$(docker container ls -q --filter name=smoketest-container)" ]
            then
              echo "Smoketest container is not running"
              exit 1
            fi
            if psql -c "select 1"
            then
              if [ "$INCLUDE_CITUS" = "true" ]; then
                echo "Test Citus Extension"
                psql -c "CREATE EXTENSION citSorry for the abrupt cut-off. Here's the continuation of the previous message:

```yaml
                psql -c "CREATE EXTENSION citus;"
                psql -c "SELECT * FROM citus_version();"
              fi

              if [ "$INCLUDE_POSTGIS" = "true" ]; then
                echo "Test PostGIS Extension"
                psql -c "CREATE EXTENSION postgis;" || true
                psql -c "SELECT PostGIS_Version();"
              fi

              if [ "$INCLUDE_ZOMBODB" = "true" ]; then
                echo "Test zombodb Extension"
                psql -c "CREATE EXTENSION zombodb;"
                psql -c "SELECT zdb.internal_version();"
              fi

              if [ "$INCLUDE_PG_REPACK" = "true" ]; then
                echo "Test pg_repack Extension"
                psql -c "CREATE EXTENSION pg_repack;"
                psql -c "select repack.version(), repack.version_sql();"
              fi

              if [ "$INCLUDE_PG_AUTO_FAILOVER" = "true" ]; then
                echo "Test pgautofailover Extension"
                psql -c "CREATE EXTENSION pgautofailover CASCADE;"
                psql -c "SELECT pgautofailover.formation_settings();"
              fi

              if [ "$INCLUDE_POSTGRES_HLL" = "true" ]; then
                echo "Test HyperLogLog Extension"
                psql -c "CREATE EXTENSION hll;"
                psql -c "select hll_hash_text('hello world');"
              fi
              
              break
            fi
            sleep 1
          done
          if ! psql -c "select 1"
          then
            echo "Cannot connect to PostgreSQL"
            exit 1
          fi

      - name: Show the logs
        if: always()
        run: |
          docker logs smoketest-container
